name: Terraform CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-ci.yml'

env:
  TF_VERSION: "1.7.0"
  AWS_REGION: "us-east-1"
  #AWS_PROFILE: "default"

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      #env:
        #AWS_PROFILE: ${{ env.#AWS_PROFILE }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: tfplan

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        format: sarif
        out: tfsec-results.sarif
        soft_fail: true

    - name: Upload TFSec Results
      uses: actions/upload-artifact@v4
      with:
        name: tfsec-results
        path: tfsec-results.sarif

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    #if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Generate Cost Report
      run: |
        terraform plan -out=tfplan
        terraform show -json tfplan > plan.json
      #env:
        #AWS_PROFILE: ${{ env.#AWS_PROFILE }}

    - name: Run Infracost
      uses: infracost/actions/comment@v2
      with:
        path: plan.json
        behavior: update
        github-token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security]
    #if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply (Test Environment)
      run: |
        terraform apply -auto-approve \
          -var="environment=test" \
          -var="name=test-eks-cluster"
      env:
        TF_VAR_environment: "test"
        TF_VAR_name: "test-eks-cluster"
        #AWS_PROFILE: ${{ env.#AWS_PROFILE }}

    - name: Test EKS Cluster
      run: |
        # Wait for cluster to be ready
        aws eks wait cluster-active --name test-eks-cluster --region ${{ env.AWS_REGION }}
        
        # Update kubeconfig
        aws eks update-kubeconfig --name test-eks-cluster --region ${{ env.AWS_REGION }}
        
        # Test cluster connectivity
        kubectl get nodes
        kubectl get pods --all-namespaces

    - name: Cleanup Test Environment
      if: always()
      run: |
        terraform destroy -auto-approve \
          -var="environment=test" \
          -var="name=test-eks-cluster"
      env:
        TF_VAR_environment: "test"
        TF_VAR_name: "test-eks-cluster"
        #AWS_PROFILE: ${{ env.#AWS_PROFILE }} 
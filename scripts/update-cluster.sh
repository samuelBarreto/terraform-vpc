#!/bin/bash

# Script para atualizar o cluster EKS com configura√ß√£o correta de autentica√ß√£o
# Uso: ./scripts/update-cluster.sh [CLUSTER_NAME] [AWS_REGION] [AWS_PROFILE]

set -e

# Configura√ß√µes padr√£o
CLUSTER_NAME=${1:-"my-eks-cluster"}
AWS_REGION=${2:-"us-east-1"}
AWS_PROFILE=${3:-"default"}

echo "üöÄ Iniciando atualiza√ß√£o do cluster EKS..."
echo "üìã Configura√ß√µes:"
echo "   Cluster: $CLUSTER_NAME"
echo "   Regi√£o: $AWS_REGION"
echo "   Profile: $AWS_PROFILE"
echo ""

# 1. Atualizar kubeconfig
echo "üîß Atualizando configura√ß√£o do kubectl..."
aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME --profile $AWS_PROFILE

# 2. Verificar conectividade
echo "üîç Verificando conectividade com o cluster..."
kubectl get nodes

# 3. Configurar vari√°veis de ambiente para o Terraform
echo "‚öôÔ∏è Configurando ambiente para Terraform..."
export AWS_PROFILE=$AWS_PROFILE
export AWS_REGION=$AWS_REGION

# 4. Verificar se o aws-auth configmap existe e est√° correto
echo "üîê Verificando aws-auth configmap..."
if kubectl get configmap aws-auth -n kube-system > /dev/null 2>&1; then
    echo "‚úÖ aws-auth configmap existe"
else
    echo "‚ö†Ô∏è aws-auth configmap n√£o encontrado, ser√° criado pelo Terraform"
fi

# 5. Verificar se o namespace ingress-nginx existe
echo "üîç Verificando namespace ingress-nginx..."
if kubectl get namespace ingress-nginx > /dev/null 2>&1; then
    echo "‚úÖ namespace ingress-nginx existe"
else
    echo "‚ö†Ô∏è namespace ingress-nginx n√£o encontrado, ser√° criado pelo Terraform"
fi

# 6. Executar terraform plan com configura√ß√£o espec√≠fica
echo "üìã Executando terraform plan..."
echo "üí° Dica: Se houver erros de autentica√ß√£o, o Terraform tentar√° recriar os recursos Kubernetes"

# Tentar executar o plan
if terraform plan; then
    echo "‚úÖ terraform plan executado com sucesso!"
else
    echo "‚ö†Ô∏è terraform plan falhou, mas isso pode ser normal para recursos Kubernetes"
    echo "üí° Tentando aplicar diretamente..."
fi

# 7. Perguntar se deseja aplicar
echo ""
read -p "‚ùì Deseja aplicar as mudan√ßas? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üöÄ Aplicando mudan√ßas..."
    terraform apply -auto-approve
    echo "‚úÖ Atualiza√ß√£o conclu√≠da!"
    
    # 8. Verificar se tudo est√° funcionando
    echo "üîç Verificando status do cluster ap√≥s atualiza√ß√£o..."
    kubectl get nodes
    kubectl get pods -n kube-system | grep aws-auth
    kubectl get pods -n ingress-nginx 2>/dev/null || echo "Namespace ingress-nginx n√£o encontrado (normal se n√£o configurado)"
else
    echo "‚ùå Aplica√ß√£o cancelada."
fi 
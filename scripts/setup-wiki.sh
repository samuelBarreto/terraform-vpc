#!/bin/bash

# Script para configurar a Wiki do projeto no GitHub
# Este script ajuda a criar e configurar a Wiki do reposit√≥rio

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Setup Wiki - Terraform EKS   ${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Verificar se estamos no diret√≥rio correto
check_directory() {
    if [ ! -f "main.tf" ] || [ ! -d "modules" ]; then
        print_error "Este script deve ser executado na raiz do projeto Terraform EKS"
        exit 1
    fi
}

# Verificar se a pasta wiki existe
check_wiki_directory() {
    if [ ! -d "wiki" ]; then
        print_error "Pasta 'wiki' n√£o encontrada. Execute primeiro o script de cria√ß√£o da Wiki."
        exit 1
    fi
}

# Verificar depend√™ncias
check_dependencies() {
    print_message "Verificando depend√™ncias..."
    
    if ! command -v git &> /dev/null; then
        print_error "Git n√£o est√° instalado"
        exit 1
    fi
    
    if ! command -v gh &> /dev/null; then
        print_warning "GitHub CLI n√£o est√° instalado. Voc√™ precisar√° configurar manualmente."
    fi
    
    print_message "Depend√™ncias verificadas ‚úì"
}

# Obter informa√ß√µes do reposit√≥rio
get_repo_info() {
    print_message "Obtendo informa√ß√µes do reposit√≥rio..."
    
    # Tentar obter via GitHub CLI
    if command -v gh &> /dev/null; then
        REPO_URL=$(gh repo view --json url -q .url 2>/dev/null || echo "")
    fi
    
    # Se n√£o conseguir via CLI, tentar via git remote
    if [ -z "$REPO_URL" ]; then
        REPO_URL=$(git remote get-url origin 2>/dev/null || echo "")
    fi
    
    if [ -z "$REPO_URL" ]; then
        print_warning "N√£o foi poss√≠vel detectar a URL do reposit√≥rio automaticamente"
        read -p "Digite a URL do seu reposit√≥rio GitHub: " REPO_URL
    fi
    
    # Extrair nome do usu√°rio e reposit√≥rio
    if [[ $REPO_URL =~ github\.com[:/]([^/]+)/([^/]+) ]]; then
        GITHUB_USER="${BASH_REMATCH[1]}"
        REPO_NAME="${BASH_REMATCH[2]}"
        REPO_NAME="${REPO_NAME%.git}"  # Remove .git se presente
    else
        print_error "URL do reposit√≥rio inv√°lida"
        exit 1
    fi
    
    print_message "Reposit√≥rio: $GITHUB_USER/$REPO_NAME"
}

# Criar branch da Wiki
create_wiki_branch() {
    print_message "Criando branch da Wiki..."
    
    # Verificar se j√° existe uma branch wiki
    if git branch -a | grep -q "remotes/origin/wiki"; then
        print_warning "Branch 'wiki' j√° existe. Fazendo checkout..."
        git checkout wiki
        git pull origin wiki
    else
        # Criar nova branch
        git checkout -b wiki
        print_message "Branch 'wiki' criada ‚úì"
    fi
}

# Copiar arquivos da Wiki
copy_wiki_files() {
    print_message "Copiando arquivos da Wiki..."
    
    # Copiar todos os arquivos da pasta wiki para a raiz
    cp -r wiki-page/* .
    
    # Remover a pasta wiki original
    rm -rf wiki
    
    print_message "Arquivos da Wiki copiados ‚úì"
}

# Configurar arquivo _Sidebar.md
setup_sidebar() {
    print_message "Configurando sidebar da Wiki..."
    
    cat > _Sidebar.md << 'EOF'
# üìö Terraform EKS Wiki

## üèóÔ∏è Infraestrutura
- [üè† Home](Home)
- [üèóÔ∏è Vis√£o da Arquitetura](Architecture-Overview)
- [üõ†Ô∏è Guia de Instala√ß√£o](Installation-Guide)

## üîÑ CI/CD
- [üîÑ Pipeline CI/CD](CI-Pipeline)
- [üîí Seguran√ßa](Security-and-Compliance)
- [üß™ Testes](Automated-Testing)

## üìä Monitoramento
- [üìä Logs e Monitoramento](Logging-and-Monitoring)
- [üö® Troubleshooting](Troubleshooting)

## üéØ Exemplos
- [üöÄ Deploy de Aplica√ß√µes](Application-Deployment)
- [üîß Configura√ß√£o de Ingress](Ingress-Configuration)

---
*√öltima atualiza√ß√£o: $(date)*
EOF

    print_message "Sidebar configurada ‚úì"
}

# Configurar arquivo _Footer.md
setup_footer() {
    print_message "Configurando footer da Wiki..."
    
    cat > _Footer.md << 'EOF'
---

**üìö Terraform EKS Infrastructure Wiki**  
**Vers√£o**: 1.0.0  
**√öltima Atualiza√ß√£o**: $(date)  
**Mantido por**: [Sua Equipe]

---
*[Reportar Problema](https://github.com/$GITHUB_USER/$REPO_NAME/issues) | [Contribuir](https://github.com/$GITHUB_USER/$REPO_NAME/pulls)*
EOF

    print_message "Footer configurado ‚úì"
}

# Fazer commit das mudan√ßas
commit_changes() {
    print_message "Fazendo commit das mudan√ßas..."
    
    git add .
    git commit -m "üìö Adiciona Wiki completa do projeto

- Adiciona documenta√ß√£o completa da infraestrutura EKS
- Inclui guias de instala√ß√£o, configura√ß√£o e troubleshooting
- Adiciona documenta√ß√£o do pipeline CI/CD
- Configura sidebar e footer da Wiki

Vers√£o: 1.0.0"
    
    print_message "Commit realizado ‚úì"
}

# Push para o reposit√≥rio
push_to_repo() {
    print_message "Enviando para o reposit√≥rio..."
    
    git push origin wiki
    
    print_message "Push realizado ‚úì"
}

# Configurar Wiki no GitHub
setup_github_wiki() {
    print_message "Configurando Wiki no GitHub..."
    
    if command -v gh &> /dev/null; then
        # Tentar configurar via GitHub CLI
        gh repo edit --enable-wiki=true 2>/dev/null || print_warning "N√£o foi poss√≠vel configurar via CLI"
    fi
    
    print_message "Para ativar a Wiki no GitHub:"
    echo "1. V√° para https://github.com/$GITHUB_USER/$REPO_NAME"
    echo "2. Clique em 'Settings'"
    echo "3. Role at√© 'Features'"
    echo "4. Marque 'Wikis'"
    echo "5. Clique em 'Save'"
}

# Mostrar pr√≥ximos passos
show_next_steps() {
    print_message "Pr√≥ximos passos:"
    echo ""
    echo "1. üìù Ative a Wiki no GitHub:"
    echo "   https://github.com/$GITHUB_USER/$REPO_NAME/settings"
    echo ""
    echo "2. üîó Acesse a Wiki:"
    echo "   https://github.com/$GITHUB_USER/$REPO_NAME/wiki"
    echo ""
    echo "3. üìö Personalize o conte√∫do:"
    echo "   - Edite as p√°ginas conforme necess√°rio"
    echo "   - Adicione informa√ß√µes espec√≠ficas do seu projeto"
    echo "   - Atualize links e exemplos"
    echo ""
    echo "4. üîÑ Mantenha atualizada:"
    echo "   - Revise regularmente"
    echo "   - Adicione novas funcionalidades"
    echo "   - Solicite feedback da equipe"
}

# Fun√ß√£o principal
main() {
    print_header
    
    check_directory
    check_wiki_directory
    check_dependencies
    get_repo_info
    
    echo ""
    print_message "Iniciando configura√ß√£o da Wiki..."
    echo ""
    
    create_wiki_branch
    copy_wiki_files
    setup_sidebar
    setup_footer
    commit_changes
    push_to_repo
    setup_github_wiki
    
    echo ""
    print_message "‚úÖ Wiki configurada com sucesso!"
    echo ""
    
    show_next_steps
}

# Executar fun√ß√£o principal
main "$@" 